#ifndef __NUI_OBJECT__
#define __NUI_OBJECT__

#include <vector>
#include <ncurses.h>
#include <string>
#include <NUITypes.hpp>
#include <signals/signal.hpp>
#include <events/NUIEvent.hpp>
#include <events/NUIChildEvent.hpp>

#define NUI_UNUSED(par) (void)par;

namespace NUI {
        class NUIObject {
        public:
            NUIObject(NUIObject* parent = nullptr);

            NUIObject& addChild(NUIObject* obj);
            NUIObject& setFocus(NUIBool f);
            
            virtual bool event(NUIEvent* event);

            static NUIReal nObjects;  // Object counter
        protected:
                virtual void childEvent(NUIChildEvent* event);

                std::vector<NUIObject*> m_childs;
                NUIObject* m_parent;
                NUIReal m_objectID;
        };
}

#endif	