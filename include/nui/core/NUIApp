#ifndef __GUI_HPP
#define __GUI_HPP

#include <NUIWindow>
#include <NUIObject>
#include <functional>

#include <queue>

#include <signals/signal.hpp>

class IPainter {
public:
    virtual void init() = 0;
};

class NCursesPainter : public IPainter {
public:
    void init();
};

namespace NUI {

    class NUIApp : public NUIObject {
    public:
        /** Constructor */
        NUIApp(IPainter* painter = nullptr);

        void setMainWin(NUIWindow* win) { m_win = win; }
        bool isKeyPressed();
        void handleKeyPress();

        static void NUIPostEvent(NUIObject* recv, NUIEvent* event);
        
        static void NUISendEvent(NUIObject* recv, NUIEvent* event);

        static NUIWindow* focusWindow();
        static NUIObject* focusObject();
        
        /** Destructor */
        virtual ~NUIApp();

        /** Initialize */
        void mainloop(volatile bool* running);

        Signals::signal<NUIReal> keyPressed;

    private:
        NUIWindow* m_win;

        std::queue<std::function<void()>> m_eventQueue;
    };
}

extern NUI::NUIApp* nuiApp;

#endif